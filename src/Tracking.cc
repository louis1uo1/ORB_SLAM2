/**
* This file is part of ORB-SLAM2.
*
* Copyright (C) 2014-2016 Ra√∫l Mur-Artal <raulmur at unizar dot es> (University of Zaragoza)
* For more information see <https://github.com/raulmur/ORB_SLAM2>
*
* ORB-SLAM2 is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* ORB-SLAM2 is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with ORB-SLAM2. If not, see <http://www.gnu.org/licenses/>.
*/


#include "Tracking.h"
#include<opencv2/core/core.hpp>
#include<opencv2/features2d/features2d.hpp>
 #include <unistd.h>
#include"ORBmatcher.h"
#include"FrameDrawer.h"
#include"Converter.h"
#include"Map.h"
#include"Initializer.h"

#include"Optimizer.h"
#include"PnPsolver.h"

#include<iostream>

#include<mutex>


using namespace std;

namespace ORB_SLAM2
{

Tracking::Tracking(System *pSys, ORBVocabulary* pVoc, FrameDrawer *pFrameDrawer, MapDrawer *pMapDrawer, Map *pMap, KeyFrameDatabase* pKFDB, const string &strSettingPath, const int sensor):
    mState(NO_IMAGES_YET), mSensor(sensor), mbOnlyTracking(false), mbVO(false), mpORBVocabulary(pVoc),
    mpKeyFrameDB(pKFDB), mpInitializer(static_cast<Initializer*>(NULL)), mpSystem(pSys), mpViewer(NULL),
    mpFrameDrawer(pFrameDrawer), mpMapDrawer(pMapDrawer), mpMap(pMap), mnLastRelocFrameId(0)
{
    // Load camera parameters from settings file

    cv::FileStorage fSettings(strSettingPath, cv::FileStorage::READ);
    float fx = fSettings["Camera.fx"];
    float fy = fSettings["Camera.fy"];
    float cx = fSettings["Camera.cx"];
    float cy = fSettings["Camera.cy"];

    cv::Mat K = cv::Mat::eye(3,3,CV_32F);
    K.at<float>(0,0) = fx;
    K.at<float>(1,1) = fy;
    K.at<float>(0,2) = cx;
    K.at<float>(1,2) = cy;
    K.copyTo(mK);

    cv::Mat DistCoef(4,1,CV_32F);
    DistCoef.at<float>(0) = fSettings["Camera.k1"];
    DistCoef.at<float>(1) = fSettings["Camera.k2"];
    DistCoef.at<float>(2) = fSettings["Camera.p1"];
    DistCoef.at<float>(3) = fSettings["Camera.p2"];
    const float k3 = fSettings["Camera.k3"];
    if(k3!=0)
    {
        DistCoef.resize(5);
        DistCoef.at<float>(4) = k3;
    }
    DistCoef.copyTo(mDistCoef);

    mbf = fSettings["Camera.bf"];

    float fps = fSettings["Camera.fps"];
    if(fps==0)
        fps=30;

    // Max/Min Frames to insert keyframes and to check relocalisation
    mMinFrames = 0;
    mMaxFrames = fps;

    cout << endl << "Camera Parameters: " << endl;
    cout << "- fx: " << fx << endl;
    cout << "- fy: " << fy << endl;
    cout << "- cx: " << cx << endl;
    cout << "- cy: " << cy << endl;
    cout << "- k1: " << DistCoef.at<float>(0) << endl;
    cout << "- k2: " << DistCoef.at<float>(1) << endl;
    if(DistCoef.rows==5)
        cout << "- k3: " << DistCoef.at<float>(4) << endl;
    cout << "- p1: " << DistCoef.at<float>(2) << endl;
    cout << "- p2: " << DistCoef.at<float>(3) << endl;
    cout << "- fps: " << fps << endl;


    int nRGB = fSettings["Camera.RGB"];
    mbRGB = nRGB;

    if(mbRGB)
        cout << "- color order: RGB (ignored if grayscale)" << endl;
    else
        cout << "- color order: BGR (ignored if grayscale)" << endl;

    // Load ORB parameters

    int nFeatures = fSettings["ORBextractor.nFeatures"];
    float fScaleFactor = fSettings["ORBextractor.scaleFactor"];
    int nLevels = fSettings["ORBextractor.nLevels"];
    int fIniThFAST = fSettings["ORBextractor.iniThFAST"];
    int fMinThFAST = fSettings["ORBextractor.minThFAST"];

    mpORBextractorLeft = new ORBextractor(nFeatures,fScaleFactor,nLevels,fIniThFAST,fMinThFAST);

    if(sensor==System::STEREO)
        mpORBextractorRight = new ORBextractor(nFeatures,fScaleFactor,nLevels,fIniThFAST,fMinThFAST);

    if(sensor==System::MONOCULAR)
        mpIniORBextractor = new ORBextractor(2*nFeatures,fScaleFactor,nLevels,fIniThFAST,fMinThFAST);

    cout << endl  << "ORB Extractor Parameters: " << endl;
    cout << "- Number of Features: " << nFeatures << endl;
    cout << "- Scale Levels: " << nLevels << endl;
    cout << "- Scale Factor: " << fScaleFactor << endl;
    cout << "- Initial Fast Threshold: " << fIniThFAST << endl;
    cout << "- Minimum Fast Threshold: " << fMinThFAST << endl;

    if(sensor==System::STEREO || sensor==System::RGBD)
    {
        mThDepth = mbf*(float)fSettings["ThDepth"]/fx;
        cout << endl << "Depth Threshold (Close/Far Points): " << mThDepth << endl;
    }

    if(sensor==System::RGBD)
    {
        mDepthMapFactor = fSettings["DepthMapFactor"];
        if(fabs(mDepthMapFactor)<1e-5)
            mDepthMapFactor=1;
        else
            mDepthMapFactor = 1.0f/mDepthMapFactor;
    }

}

void Tracking::SetLocalMapper(LocalMapping *pLocalMapper)
{
    mpLocalMapper=pLocalMapper;
}

void Tracking::SetLoopClosing(LoopClosing *pLoopClosing)
{
    mpLoopClosing=pLoopClosing;
}

void Tracking::SetViewer(Viewer *pViewer)
{
    mpViewer=pViewer;
}


cv::Mat Tracking::GrabImageStereo(const cv::Mat &imRectLeft, const cv::Mat &imRectRight, const double &timestamp)
{
    mImGray = imRectLeft;
    cv::Mat imGrayRight = imRectRight;

    if(mImGray.channels()==3)
    {
        if(mbRGB)
        {
            cvtColor(mImGray,mImGray,CV_RGB2GRAY);
            cvtColor(imGrayRight,imGrayRight,CV_RGB2GRAY);
        }
        else
        {
            cvtColor(mImGray,mImGray,CV_BGR2GRAY);
            cvtColor(imGrayRight,imGrayRight,CV_BGR2GRAY);
        }
    }
    else if(mImGray.channels()==4)
    {
        if(mbRGB)
        {
            cvtColor(mImGray,mImGray,CV_RGBA2GRAY);
            cvtColor(imGrayRight,imGrayRight,CV_RGBA2GRAY);
        }
        else
        {
            cvtColor(mImGray,mImGray,CV_BGRA2GRAY);
            cvtColor(imGrayRight,imGrayRight,CV_BGRA2GRAY);
        }
    }

    mCurrentFrame = Frame(mImGray,imGrayRight,timestamp,mpORBextractorLeft,mpORBextractorRight,mpORBVocabulary,mK,mDistCoef,mbf,mThDepth);

    Track();

    return mCurrentFrame.mTcw.clone();
}


cv::Mat Tracking::GrabImageRGBD(const cv::Mat &imRGB,const cv::Mat &imD, const double &timestamp)
{
    mImGray = imRGB;
    cv::Mat imDepth = imD;

    if(mImGray.channels()==3)
    {
        if(mbRGB)
            cvtColor(mImGray,mImGray,CV_RGB2GRAY);
        else
            cvtColor(mImGray,mImGray,CV_BGR2GRAY);
    }
    else if(mImGray.channels()==4)
    {
        if(mbRGB)
            cvtColor(mImGray,mImGray,CV_RGBA2GRAY);
        else
            cvtColor(mImGray,mImGray,CV_BGRA2GRAY);
    }

    if((fabs(mDepthMapFactor-1.0f)>1e-5) || imDepth.type()!=CV_32F)
        imDepth.convertTo(imDepth,CV_32F,mDepthMapFactor);

    mCurrentFrame = Frame(mImGray,imDepth,timestamp,mpORBextractorLeft,mpORBVocabulary,mK,mDistCoef,mbf,mThDepth);

    Track();

    return mCurrentFrame.mTcw.clone();
}


cv::Mat Tracking::GrabImageMonocular(const cv::Mat &im, const double &timestamp)
{
    mImGray = im;

    if(mImGray.channels()==3)
    {
        if(mbRGB)
            cvtColor(mImGray,mImGray,CV_RGB2GRAY);
        else
            cvtColor(mImGray,mImGray,CV_BGR2GRAY);
    }
    else if(mImGray.channels()==4)
    {
        if(mbRGB)
            cvtColor(mImGray,mImGray,CV_RGBA2GRAY);
        else
            cvtColor(mImGray,mImGray,CV_BGRA2GRAY);
    }

    if(mState==NOT_INITIALIZED || mState==NO_IMAGES_YET)
        mCurrentFrame = Frame(mImGray,timestamp,mpIniORBextractor,mpORBVocabulary,mK,mDistCoef,mbf,mThDepth);
    else
        mCurrentFrame = Frame(mImGray,timestamp,mpORBextractorLeft,mpORBVocabulary,mK,mDistCoef,mbf,mThDepth);

    Track();

    return mCurrentFrame.mTcw.clone();
}

void Tracking::Track()
{
    if(mState==NO_IMAGES_YET)
    {
        mState = NOT_INITIALIZED;
    }

    mLastProcessedState=mState;

    // Get Map Mutex -> Map cannot be changed
    unique_lock<mutex> lock(mpMap->mMutexMapUpdate);

    if(mState==NOT_INITIALIZED)
    {
        if(mSensor==System::STEREO || mSensor==System::RGBD)
            StereoInitialization();
        else
            MonocularInitialization();

        mpFrameDrawer->Update(this);

        if(mState!=OK)
            return;
    }
    else
    {
        // System is initialized. Track Frame.
        bool bOK;

        // Initial camera pose estimation using motion model or relocalization (if tracking is lost)
        if(!mbOnlyTracking)
        {
            // Local Mapping is activated. This is the normal behaviour, unless
            // you explicitly activate the "only tracking" mode.

            if(mState==OK)
            {
                // Local Mapping might have changed some MapPoints tracked in last frame
                CheckReplacedInLastFrame();

                if(mVelocity.empty() || mCurrentFrame.mnId<mnLastRelocFrameId+2)
                {
                    bOK = TrackReferenceKeyFrame();
                }
                else
                {
                    bOK = TrackWithMotionModel();
                    if(!bOK)
                        bOK = TrackReferenceKeyFrame();
                }
            }
            else
            {
                bOK = Relocalization();
            }
        }
        else
        {
            // Localization Mode: Local Mapping is deactivated

            if(mState==LOST)
            {
                bOK = Relocalization();
            }
            else
            {
                if(!mbVO)
                {
                    // In last frame we tracked enough MapPoints in the map

                    if(!mVelocity.empty())
                    {
                        bOK = TrackWithMotionModel();
                    }
                    else
                    {
                        bOK = TrackReferenceKeyFrame();
                    }
                }
                else
                {
                    // In last frame we tracked mainly "visual odometry" points.

                    // We compute two camera poses, one from motion model and one doing relocalization.
                    // If relocalization is sucessfull we choose that solution, otherwise we retain
                    // the "visual odometry" solution.

                    bool bOKMM = false;
                    bool bOKReloc = false;
                    vector<MapPoint*> vpMPsMM;
                    vector<bool> vbOutMM;
                    cv::Mat TcwMM;
                    if(!mVelocity.empty())
                    {
                        bOKMM = TrackWithMotionModel();
                        vpMPsMM = mCurrentFrame.mvpMapPoints;
                        vbOutMM = mCurrentFrame.mvbOutlier;
                        TcwMM = mCurrentFrame.mTcw.clone();
                    }
                    bOKReloc = Relocalization();

                    if(bOKMM && !bOKReloc)
                    {
                        mCurrentFrame.SetPose(TcwMM);
                        mCurrentFrame.mvpMapPoints = vpMPsMM;
                        mCurrentFrame.mvbOutlier = vbOutMM;

                        if(mbVO)
                        {
                            for(int i =0; i<mCurrentFrame.N; i++)
                            {
                                if(mCurrentFrame.mvpMapPoints[i] && !mCurrentFrame.mvbOutlier[i])
                                {
                                    mCurrentFrame.mvpMapPoints[i]->IncreaseFound();
                                }
                            }
                        }
                    }
                    else if(bOKReloc)
                    {
                        mbVO = false;
                    }

                    bOK = bOKReloc || bOKMM;
                }
            }
        }

        mCurrentFrame.mpReferenceKF = mpReferenceKF;

        // If we have an initial estimation of the camera pose and matching. Track the local map.
        if(!mbOnlyTracking)
        {
            if(bOK)
                bOK = TrackLocalMap();
        }
        else
        {
            // mbVO true means that there are few matches to MapPoints in the map. We cannot retrieve
            // a local map and therefore we do not perform TrackLocalMap(). Once the system relocalizes
            // the camera we will use the local map again.
            if(bOK && !mbVO)
                bOK = TrackLocalMap();
        }

        if(bOK)
            mState = OK;
        else
            mState=LOST;

        // Update drawer
        mpFrameDrawer->Update(this);

        // If tracking were good, check if we insert a keyframe
        if(bOK)
        {
            // Update motion model
            if(!mLastFrame.mTcw.empty())
            {
                cv::Mat LastTwc = cv::Mat::eye(4,4,CV_32F);
                mLastFrame.GetRotationInverse().copyTo(LastTwc.rowRange(0,3).colRange(0,3));
                mLastFrame.GetCameraCenter().copyTo(LastTwc.rowRange(0,3).col(3));
                mVelocity = mCurrentFrame.mTcw*LastTwc;
            }
            else
                mVelocity = cv::Mat();

            mpMapDrawer->SetCurrentCameraPose(mCurrentFrame.mTcw);

            // Clean VO matches
            for(int i=0; i<mCurrentFrame.N; i++)
            {
                MapPoint* pMP = mCurrentFrame.mvpMapPoints[i];
                if(pMP)
                    if(pMP->Observations()<1)
                    {
                        mCurrentFrame.mvbOutlier[i] = false;
                        mCurrentFrame.mvpMapPoints[i]=static_cast<MapPoint*>(NULL);
                    }
            }

            // Delete temporal MapPoints
            for(list<MapPoint*>::iterator lit = mlpTemporalPoints.begin(), lend =  mlpTemporalPoints.end(); lit!=lend; lit++)
            {
                MapPoint* pMP = *lit;
                delete pMP;
            }
            mlpTemporalPoints.clear();

            // Check if we need to insert a new keyframe
            if(NeedNewKeyFrame())
                CreateNewKeyFrame();

            // We allow points with high innovation (considererd outliers by the Huber Function)
            // pass to the new keyframe, so that bundle adjustment will finally decide
            // if they are outliers or not. We don't want next frame to estimate its position
            // with those points so we discard them in the frame.
            for(int i=0; i<mCurrentFrame.N;i++)
            {
                if(mCurrentFrame.mvpMapPoints[i] && mCurrentFrame.mvbOutlier[i])
                    mCurrentFrame.mvpMapPoints[i]=static_cast<MapPoint*>(NULL);
            }
        }

        // Reset if the camera get lost soon after initialization
        if(mState==LOST)
        {
            if(mpMap->KeyFramesInMap()<=5)
            {
                cout << "Track lost soon after initialisation, reseting..." << endl;
                mpSystem->Reset();
                return;
            }
        }

        if(!mCurrentFrame.mpReferenceKF)
            mCurrentFrame.mpReferenceKF = mpReferenceKF;

        mLastFrame = Frame(mCurrentFrame);
    }

    // Store frame pose information to retrieve the complete camera trajectory afterwards.
    if(!mCurrentFrame.mTcw.empty())
    {
        cv::Mat Tcr = mCurrentFrame.mTcw*mCurrentFrame.mpReferenceKF->GetPoseInverse();
        mlRelativeFramePoses.push_back(Tcr);
        mlpReferences.push_back(mpReferenceKF);
        mlFrameTimes.push_back(mCurrentFrame.mTimeStamp);
        mlbLost.push_back(mState==LOST);
    }
    else
    {
        // This can happen if tracking is lost
        mlRelativeFramePoses.push_back(mlRelativeFramePoses.back());
        mlpReferences.push_back(mlpReferences.back());
        mlFrameTimes.push_back(mlFrameTimes.back());
        mlbLost.push_back(mState==LOST);
    }

}


void Tracking::StereoInitialization()
{
    if(mCurrentFrame.N>500)
    {
        // Set Frame pose to the origin
        mCurrentFrame.SetPose(cv::Mat::eye(4,4,CV_32F));

        // Create KeyFrame
        KeyFrame* pKFini = new KeyFrame(mCurrentFrame,mpMap,mpKeyFrameDB);

        // Insert KeyFrame in the map
        mpMap->AddKeyFrame(pKFini);

        // Create MapPoints and asscoiate to KeyFrame
        for(int i=0; i<mCurrentFrame.N;i++)
        {
            float z = mCurrentFrame.mvDepth[i];
            if(z>0)
            {
                cv::Mat x3D = mCurrentFrame.UnprojectStereo(i);
                MapPoint* pNewMP = new MapPoint(x3D,pKFini,mpMap);
                pNewMP->AddObservation(pKFini,i);
                pKFini->AddMapPoint(pNewMP,i);
                pNewMP->ComputeDistinctiveDescriptors();
                pNewMP->UpdateNormalAndDepth();
                mpMap->AddMapPoint(pNewMP);

                mCurrentFrame.mvpMapPoints[i]=pNewMP;
            }
        }

        cout << "New map created with " << mpMap->MapPointsInMap() << " points" << endl;

        mpLocalMapper->InsertKeyFrame(pKFini);

        mLastFrame = Frame(mCurrentFrame);
        mnLastKeyFrameId=mCurrentFrame.mnId;
        mpLastKeyFrame = pKFini;

        mvpLocalKeyFrames.push_back(pKFini);
        mvpLocalMapPoints=mpMap->GetAllMapPoints();
        mpReferenceKF = pKFini;
        mCurrentFrame.mpReferenceKF = pKFini;

        mpMap->SetReferenceMapPoints(mvpLocalMapPoints);

        mpMap->mvpKeyFrameOrigins.push_back(pKFini);

        mpMapDrawer->SetCurrentCameraPose(mCurrentFrame.mTcw);

        mState=OK;
    }
}

void Tracking::MonocularInitialization()
{

    if(!mpInitializer)
    {
        // Set Reference Frame
        if(mCurrentFrame.mvKeys.size()>100)
        {
            mInitialFrame = Frame(mCurrentFrame);
            mLastFrame = Frame(mCurrentFrame);
            mvbPrevMatched.resize(mCurrentFrame.mvKeysUn.size());
            for(size_t i=0; i<mCurrentFrame.mvKeysUn.size(); i++)
                mvbPrevMatched[i]=mCurrentFrame.mvKeysUn[i].pt;

            if(mpInitializer)
                delete mpInitializer;

            mpInitializer =  new Initializer(mCurrentFrame,1.0,200);

            fill(mvIniMatches.begin(),mvIniMatches.end(),-1);

            return;
        }
    }
    else
    {
        // Try to initialize
        if((int)mCurrentFrame.mvKeys.size()<=100)
        {
            delete mpInitializer;
            mpInitializer = static_cast<Initializer*>(NULL);
            fill(mvIniMatches.begin(),mvIniMatches.end(),-1);
            return;
        }

        // Find correspondences
        ORBmatcher matcher(0.9,true);
        int nmatches = matcher.SearchForInitialization(mInitialFrame,mCurrentFrame,mvbPrevMatched,mvIniMatches,100);

        // Check if there are enough correspondences
        if(nmatches<100)
        {
            delete mpInitializer;
            mpInitializer = static_cast<Initializer*>(NULL);
            return;
        }

        cv::Mat Rcw; // Current Camera Rotation
        cv::Mat tcw; // Current Camera Translation
        vector<bool> vbTriangulated; // Triangulated Correspondences (mvIniMatches)

        if(mpInitializer->Initialize(mCurrentFrame, mvIniMatches, Rcw, tcw, mvIniP3D, vbTriangulated))
        {
            for(size_t i=0, iend=mvIniMatches.size(); i<iend;i++)
            {
                if(mvIniMatches[i]>=0 && !vbTriangulated[i])
                {
                    mvIniMatches[i]=-1;
                    nmatches--;
                }
            }

            // Set Frame Poses
            mInitialFrame.SetPose(cv::Mat::eye(4,4,CV_32F));
            cv::Mat Tcw = cv::Mat::eye(4,4,CV_32F);
            Rcw.copyTo(Tcw.rowRange(0,3).colRange(0,3));
            tcw.copyTo(Tcw.rowRange(0,3).col(3));
            mCurrentFrame.SetPose(Tcw);

            CreateInitialMapMonocular();
        }
    }
}

void Tracking::CreateInitialMapMonocular()
{
    // Create KeyFrames
    KeyFrame* pKFini = new KeyFrame(mInitialFrame,mpMap,mpKeyFrameDB);
    KeyFrame* pKFcur = new KeyFrame(mCurrentFrame,mpMap,mpKeyFrameDB);


    pKFini->ComputeBoW();
    pKFcur->ComputeBoW();

    // Insert KFs in the map
    mpMap->AddKeyFrame(pKFini);
    mpMap->AddKeyFrame(pKFcur);

    // Create MapPoints and asscoiate to keyframes
    for(size_t i=0; i<mvIniMatches.size();i++)
    {
        if(mvIniMatches[i]<0)
            continue;

        //Create MapPoint.
        cv::Mat worldPos(mvIniP3D[i]);

        MapPoint* pMP = new MapPoint(worldPos,pKFcur,mpMap);

        pKFini->AddMapPoint(pMP,i);
        pKFcur->AddMapPoint(pMP,mvIniMatches[i]);

        pMP->AddObservation(pKFini,i);
        pMP->AddObservation(pKFcur,mvIniMatches[i]);

        pMP->ComputeDistinctiveDescriptors();
        pMP->UpdateNormalAndDepth();

        //Fill Current Frame structure
        mCurrentFrame.mvpMapPoints[mvIniMatches[i]] = pMP;
        mCurrentFrame.mvbOutlier[mvIniMatches[i]] = false;

        //Add to Map
        mpMap->AddMapPoint(pMP);
    }

    // Update Connections
    pKFini->UpdateConnections();
    pKFcur->UpdateConnections();

    // Bundle Adjustment
    cout << "New Map created with " << mpMap->MapPointsInMap() << " points" << endl;

    Optimizer::GlobalBundleAdjustemnt(mpMap,20);

    // Set median depth to 1
    float medianDepth = pKFini->ComputeSceneMedianDepth(2);
    float invMedianDepth = 1.0f/medianDepth;

    if(medianDepth<0 || pKFcur->TrackedMapPoints(1)<100)
    {
        cout << "Wrong initialization, reseting..." << endl;
        Reset();
        return;
    }

    // Scale initial baseline
    cv::Mat Tc2w = pKFcur->GetPose();
    Tc2w.col(3).rowRange(0,3) = Tc2w.col(3).rowRange(0,3)*invMedianDepth;
    pKFcur->SetPose(Tc2w);

    // Scale points
    vector<MapPoint*> vpAllMapPoints = pKFini->GetMapPointMatches();
    for(size_t iMP=0; iMP<vpAllMapPoints.size(); iMP++)
    {
        if(vpAllMapPoints[iMP])
        {
            MapPoint* pMP = vpAllMapPoints[iMP];
            pMP->SetWorldPos(pMP->GetWorldPos()*invMedianDepth);
        }
    }

    mpLocalMapper->InsertKeyFrame(pKFini);
    mpLocalMapper->InsertKeyFrame(pKFcur);

    mCurrentFrame.SetPose(pKFcur->GetPose());
    mnLastKeyFrameId=mCurrentFrame.mnId;
    mpLastKeyFrame = pKFcur;

    mvpLocalKeyFrames.push_back(pKFcur);
    mvpLocalKeyFrames.push_back(pKFini);
    mvpLocalMapPoints=mpMap->GetAllMapPoints();
    mpReferenceKF = pKFcur;
    mCurrentFrame.mpReferenceKF = pKFcur;

    mLastFrame = Frame(mCurrentFrame);

    mpMap->SetReferenceMapPoints(mvpLocalMapPoints);

    mpMapDrawer->SetCurrentCameraPose(pKFcur->GetPose());

    mpMap->mvpKeyFrameOrigins.push_back(pKFini);

    mState=OK;
}

void Tracking::CheckReplacedInLastFrame()
{
    for(int i =0; i<mLastFrame.N; i++)
    {
        MapPoint* pMP = mLastFrame.mvpMapPoints[i];

        if(pMP)
        {
            MapPoint* pRep = pMP->GetReplaced();
            if(pRep)
            {
                mLastFrame.mvpMapPoints[i] = pRep;
            }
        }
    }
}

/**
 * @brief ÂèÇËÄÉÂÖ≥ÈîÆÂ∏ßË∑üË∏™
 * @return Ë∑üË∏™ÊàêÂäü-true Â§±Ë¥•-false
 * @note 
 */
bool Tracking::TrackReferenceKeyFrame()
{
    //Â∞ÜÂΩìÂâçÂ∏ßÁöÑÊèèËø∞Â≠êËΩ¨Âåñ‰∏∫ËØçË¢ãÂêëÈáè
    mCurrentFrame.ComputeBoW();

    //ËÆæÁΩÆÁâπÂæÅÁÇπÂåπÈÖç
    ORBmatcher matcher(0.7,true);
    vector<MapPoint*> vpMapPointMatches;
    //ÈÄöËøáËØçË¢ãÂä†Âø´ÂΩìÂâçÂ∏ßÂíåÂèÇËÄÉÂÖ≥ÈîÆÂ∏ßÁöÑÂåπÈÖç
    int nmatches = matcher.SearchByBoW(mpReferenceKF,mCurrentFrame,vpMapPointMatches);

    //Â¶ÇÊûúÂåπÈÖçÁÇπ<15ÔºåËÆ§‰∏∫Ë∑üË∏™Â§±Ë¥•
    if(nmatches<15)
        return false;

    mCurrentFrame.mvpMapPoints = vpMapPointMatches;
    mCurrentFrame.SetPose(mLastFrame.mTcw);//Â∞Ü‰∏ä‰∏ÄÂ∏ßÁöÑ‰ΩçÂßø‰Ωú‰∏∫ÂΩìÂâçÂ∏ßÁöÑ‰ΩçÂßøÂàùÂßãÂÄºÔºåÂèØ‰ª•Âä†ÈÄüBAÊî∂Êïõ

    //3D-2DÁöÑÈáçÊäïÂΩ±ËØØÂ∑Æ‰ºòÂåñ‰ΩçÂßøÔºà3D-Êù•Ê∫ê‰∫éÂåπÈÖçÂæóÂà∞ÁöÑÂú∞ÂõæÁÇπÔºå2D-Êù•Ê∫ê‰∫é‰∏ä‰∏ÄÂ∏ßÁöÑ‰ΩçÂßøÔºâ
    Optimizer::PoseOptimization(&mCurrentFrame);

    //ÂâîÈô§Â§ñÁÇπÔºàÂ§ñÁÇπÂú®‰ºòÂåñÊó∂Â∑≤ÁªèÊ†áËÆ∞Ôºâ
    int nmatchesMap = 0;
    for(int i =0; i<mCurrentFrame.N; i++)
    {
        if(mCurrentFrame.mvpMapPoints[i])
        {
            if(mCurrentFrame.mvbOutlier[i])
            {
                MapPoint* pMP = mCurrentFrame.mvpMapPoints[i];

                mCurrentFrame.mvpMapPoints[i]=static_cast<MapPoint*>(NULL);
                mCurrentFrame.mvbOutlier[i]=false;
                pMP->mbTrackInView = false;
                pMP->mnLastFrameSeen = mCurrentFrame.mnId;
                nmatches--;
            }
            else if(mCurrentFrame.mvpMapPoints[i]->Observations()>0)
                nmatchesMap++;
        }
    }
    //Ë∑üË∏™ÊàêÂäüÁöÑÂú∞ÂõæÁÇπ>10ÊâçËÆ§‰∏∫Ë∑üË∏™ÊàêÂäü
    return nmatchesMap>=10;
}

/**
 * @brief Êõ¥Êñ∞‰∏ä‰∏ÄÂ∏ßÁöÑ‰ΩçÂßø
 * @note ÂØπ‰∫éÂçïÁõÆÔºöËÆ°ÁÆó‰∏ä‰∏ÄÂ∏ßÁöÑ‰ΩçÂßø
 *      ÂØπ‰∫éÂèåÁõÆ\rgb-dÔºöÂú®‰∏ä‰∏ÄÂ∏ß‰∏≠ÈÄâÂèñÊúâÊ∑±Â∫¶ÂÄº‰∏îÊ≤°Ë¢´ÈÄâ‰∏∫Âú∞ÂõæÁÇπÁöÑÁÇπ‰Ωú‰∏∫‰∏¥Êó∂Âú∞ÂõæÁÇπÔºåÊèêÈ´òË∑üË∏™È≤ÅÊ£íÊÄß
 */
void Tracking::UpdateLastFrame()
{
    //ÈÄöËøáÂèÇËÄÉÂÖ≥ÈîÆÂ∏ßÊõ¥Êñ∞‰∏ä‰∏ÄÂ∏ßÁöÑ‰∏ñÁïåÂùêÊ†áÁ≥ª‰∏ãÁöÑ‰ΩçÂßø
    KeyFrame* pRef = mLastFrame.mpReferenceKF;
    cv::Mat Tlr = mlRelativeFramePoses.back();
    mLastFrame.SetPose(Tlr*pRef->GetPose());

    if(mnLastKeyFrameId==mLastFrame.mnId || mSensor==System::MONOCULAR || !mbOnlyTracking)0
        return;

    vector<pair<float,int> > vDepthIdx;//Á¨¨‰∏Ä‰∏™ÂÖÉÁ¥†‰∏∫ÁâπÂæÅÁÇπÊ∑±Â∫¶ÔºåÁ¨¨‰∫å‰∏™‰∏∫ÁâπÂæÅÁÇπid
    vDepthIdx.reserve(mLastFrame.N);
    //ËÆ∞ÂΩïmLastFrame‰∏≠ÊúâÊ∑±Â∫¶‰ø°ÊÅØÁöÑÁâπÂæÅÁÇπ
    for(int i=0; i<mLastFrame.N;i++)
    {
        float z = mLastFrame.mvDepth[i];
        if(z>0)
        {
            vDepthIdx.push_back(make_pair(z,i));
        }
    }

    if(vDepthIdx.empty())
        return;

    sort(vDepthIdx.begin(),vDepthIdx.end());//ÊåâÊ∑±Â∫¶‰ªéÂ∞èÂà∞Â§ßÊéíÂ∫è

    //ÂØπ‰∫éÂèåÁõÆ\rgb-dÔºöÂú®‰∏ä‰∏ÄÂ∏ß‰∏≠ÈÄâÂèñÊúâÊ∑±Â∫¶ÂÄº‰∏îÊ≤°Ë¢´ÈÄâ‰∏∫Âú∞ÂõæÁÇπÁöÑÁÇπ‰Ωú‰∏∫‰∏¥Êó∂Âú∞ÂõæÁÇπ
    int nPoints = 0;
    for(size_t j=0; j<vDepthIdx.size();j++)
    {
        int i = vDepthIdx[j].second;

        bool bCreateNew = false;//ÊòØÂê¶ÂàõÂª∫Êñ∞ÁöÑ‰∏¥Êó∂Âú∞ÂõæÁÇπÁöÑÊ†áÂøó

        MapPoint* pMP = mLastFrame.mvpMapPoints[i];
        
        if(!pMP)//ÂØπ‰∫é‰∏çÊòØÂú∞ÂõæÁÇπÁöÑÁÇπÂàõÂª∫‰∏∫Êñ∞ÁöÑ‰∏¥Êó∂Âú∞ÂõæÁÇπ
            bCreateNew = true;
        else if(pMP->Observations()<1)//Âú∞ÂõæÁÇπË¢´ÂàõÂª∫Âêé‰ΩÜÊ≤°ÊúâË¢´ËßÇÊµãÔºå‰πüÈáçÊñ∞ÂàõÂª∫‰∏∫Êñ∞ÁöÑ‰∏¥Êó∂Âú∞ÂõæÁÇπ
        {
            bCreateNew = true;
        }
        //ÂàõÂª∫‰∏¥Êó∂Âú∞ÂõæÁÇπ
        if(bCreateNew)
        {
            cv::Mat x3D = mLastFrame.UnprojectStereo(i);
            MapPoint* pNewMP = new MapPoint(x3D,mpMap,&mLastFrame,i);

            mLastFrame.mvpMapPoints[i]=pNewMP;

            mlpTemporalPoints.push_back(pNewMP);
            nPoints++;
        }
        else
        {
            nPoints++;
        }
        //Â¶ÇÊûúËØ•ÁÇπÁöÑÊ∑±Â∫¶>Ê∑±Â∫¶ÈòàÂÄº ÊàñËÄÖ  Ê∑±Â∫¶ÂÄºÂ§™Â§ß‰∫ÜÔºàÂõ†‰∏∫ÊòØÊ†πÊçÆÊ∑±Â∫¶ÊéíÂ∫èÁöÑÔºâ
        if(vDepthIdx[j].first>mThDepth && nPoints>100)
            break;
    }
}

/**
 * @brief ÊÅíÈÄüÊ®°ÂûãË∑üË∏™
 * @return Ë∑üË∏™ÊàêÂäü-true Â§±Ë¥•-false
 */
bool Tracking::TrackWithMotionModel()
{
    ORBmatcher matcher(0.9,true);//0.9-ÂåπÈÖçÁ≥ªÊï∞ true-Ê£ÄÊü•ÊóãËΩ¨

    //Êõ¥Êñ∞‰∏ä‰∏ÄÂ∏ßÁöÑ‰ΩçÂßø
    UpdateLastFrame();
    //ÈÄöËøá‰∏ä‰∏ÄÂ∏ßËé∑ÂèñÂΩìÂâçÂ∏ßÁöÑ‰ΩçÂßø
    mCurrentFrame.SetPose(mVelocity*mLastFrame.mTcw);
    //Ê∏ÖÁ©∫ÂΩìÂâçÂ∏ßÁöÑÂú∞ÂõæÁÇπ
    fill(mCurrentFrame.mvpMapPoints.begin(),mCurrentFrame.mvpMapPoints.end(),static_cast<MapPoint*>(NULL));

    int th;//ÁâπÂæÅÂåπÈÖçÁöÑÊêúÁ¥¢ÂçäÂæÑ
    if(mSensor!=System::STEREO)
        th=15;
    else
        th=7;
    //Âà©Áî®Âú∞ÂõæÁÇπÊäïÂΩ±ÂåπÈÖçÔºàÂçïÁõÆÔºâ
    int nmatches = matcher.SearchByProjection(mCurrentFrame,mLastFrame,th,mSensor==System::MONOCULAR);
    
    //ÂåπÈÖçÁÇπ<20,Áî®Êõ¥Â§ßÁöÑÊêúÁ¥¢ÂçäÂæÑÂéªÂåπÈÖç
    if(nmatches<20)
    {
        fill(mCurrentFrame.mvpMapPoints.begin(),mCurrentFrame.mvpMapPoints.end(),static_cast<MapPoint*>(NULL));
        nmatches = matcher.SearchByProjection(mCurrentFrame,mLastFrame,2*th,mSensor==System::MONOCULAR);
    }
    //ÂåπÈÖçÁÇπ‰ªçÂ∞è‰∫é20ÔºåË∑üË∏™Â§±Ë¥•
    if(nmatches<20)
        return false;

    //3d-2dÈáçÊäïÂΩ±‰ºòÂåñÂΩìÂâçÂ∏ßÁöÑ‰ΩçÂßø
    Optimizer::PoseOptimization(&mCurrentFrame);

    //ÂâîÈô§Â§ñÁÇπ
    int nmatchesMap = 0;
    for(int i =0; i<mCurrentFrame.N; i++)
    {
        if(mCurrentFrame.mvpMapPoints[i])
        {
            if(mCurrentFrame.mvbOutlier[i])
            {
                MapPoint* pMP = mCurrentFrame.mvpMapPoints[i];

                mCurrentFrame.mvpMapPoints[i]=static_cast<MapPoint*>(NULL);
                mCurrentFrame.mvbOutlier[i]=false;
                pMP->mbTrackInView = false;
                pMP->mnLastFrameSeen = mCurrentFrame.mnId;
                nmatches--;
            }
            else if(mCurrentFrame.mvpMapPoints[i]->Observations()>0)
                nmatchesMap++;
        }
    }    
    //Âú®Á∫ØË∑üË∏™Ê®°Âºè‰∏ãÔºåÂ¶ÇÊûúÂåπÈÖçÁÇπ<10ÔºåmbVOÁΩÆ‰∏∫true
    if(mbOnlyTracking)
    {
        mbVO = nmatchesMap<10;
        return nmatches>20;
    }
    //ÂåπÈÖçÁÇπÊï∞Èáè>=10,ËÆ§‰∏∫Ë∑üË∏™ÊàêÂäü
    return nmatchesMap>=10;
}

/**
 * @brief Â±ÄÈÉ®Âú∞ÂõæË∑üË∏™
 * @return Ë∑üË∏™ÊàêÂäü-true Â§±Ë¥•-false
 * @note Â±ÄÈÉ®Âú∞ÂõæË∑üË∏™ÊòØ‰∏∫‰∫ÜÂ¢ûÂä†Êõ¥Â§öÁöÑÂåπÈÖçÂÖ≥Á≥ªÔºå‰ºòÂåñ‰ΩçÂßø
 */
bool Tracking::TrackLocalMap()
{
    //!1.Êõ¥Êñ∞Â±ÄÈÉ®Âú∞ÂõæÔºàÂ±ÄÈÉ®ÂÖ≥ÈîÆÂ∏ß Â±ÄÈÉ®Âú∞ÂõæÁÇπÔºâ
    UpdateLocalMap();

    //!2.ÊâæÂà∞ËÉΩÁî®‰∫éÊäïÂΩ±ÂåπÈÖçÁöÑÂ±ÄÈÉ®Âú∞ÂõæÁÇπ
    SearchLocalPoints();

    //!3.Áî®ÂæóÂà∞ÁöÑÂ±ÄÈÉ®Âú∞ÂõæÁÇπËøõË°åBA‰ºòÂåñ
    Optimizer::PoseOptimization(&mCurrentFrame);
    mnMatchesInliers = 0;

    //!4.Êõ¥Êñ∞ÂΩìÂâçÂ∏ßÁöÑÂú∞ÂõæÁÇπÁöÑË¢´ËßÇÊµãÊ¨°Êï∞ÔºåÁªüËÆ°Ë∑üË∏™ÂåπÈÖçÊàêÂäüÁöÑÁÇπ
    for(int i=0; i<mCurrentFrame.N; i++)
    {
        if(mCurrentFrame.mvpMapPoints[i])
        {
            if(!mCurrentFrame.mvbOutlier[i])
            {
                mCurrentFrame.mvpMapPoints[i]->IncreaseFound();
                if(!mbOnlyTracking)
                {
                    if(mCurrentFrame.mvpMapPoints[i]->Observations()>0)
                        mnMatchesInliers++;
                }
                else
                    mnMatchesInliers++;
            }
            else if(mSensor==System::STEREO)
                mCurrentFrame.mvpMapPoints[i] = static_cast<MapPoint*>(NULL);

        }
    }

    //Â¶ÇÊûúÂàöÂàöÊúâÈáçÂÆö‰Ωç ÂàôË∑üË∏™ÊàêÂäüÁöÑÊù°‰ª∂Êõ¥Âä†‰∏•Ê†º
    if(mCurrentFrame.mnId<mnLastRelocFrameId+mMaxFrames && mnMatchesInliers<50)
        return false;

    //Ë∑üË∏™ÊàêÂäüÁöÑÁÇπ<30 Ë∑üË∏™Â§±Ë¥•
    if(mnMatchesInliers<30)
        return false;
    else
        return true;
}

/**
 * @brief Âà§Êñ≠ÊòØÂê¶ÈúÄË¶ÅÊèíÂÖ•ÂÖ≥ÈîÆÂ∏ß
 * @return true-ÈúÄË¶Å false-‰∏çÈúÄË¶Å
 */
bool Tracking::NeedNewKeyFrame()
{
    //!‰ª•‰∏ã‰∏∫‰∏â‰∏™‰∏çÊèíÂÖ•ÁöÑÊù°‰ª∂
    //Âú®‰ªÖÂÆö‰ΩçÊ®°Âºè‰∏ã‰∏çÊèíÂÖ•ÂÖ≥ÈîÆÂ∏ß
    if(mbOnlyTracking)
        return false;

    //Â¶ÇÊûúÂ±ÄÈÉ®Âª∫ÂõæÁ∫øÁ®ãÊ≠£Âú®Ë¢´Èó≠ÁéØÁ∫øÁ®ã‰ΩøÁî®ÔºåÂàô‰∏çÊèíÂÖ•ÂÖ≥ÈîÆÂ∏ß
    if(mpLocalMapper->isStopped() || mpLocalMapper->stopRequested())
        return false;
    //Ëé∑ÂèñÂΩìÂâçÂú∞Âõæ‰∏≠ÁöÑÂÖ≥ÈîÆÂ∏ßÁöÑÊï∞Èáè
    const int nKFs = mpMap->KeyFramesInMap();

    //Â¶ÇÊûúË∑ùÁ¶ª‰∏ä‰∏ÄÊ¨°ÈáçÂÆö‰ΩçÁöÑÊó∂Èó¥ÂæàÁü≠Ôºà1sÔºâÔºåÂπ∂‰∏îÂΩìÂâçÂú∞Âõæ‰∏≠ÁöÑÂÖ≥ÈîÆÂ∏ßÊï∞ÈáèË∂ÖËøáÈôêÂà∂Ôºå‰∏çÊèíÂÖ•ÂÖ≥ÈîÆÂ∏ß
    //mnIdÊòØÂΩìÂâçÂ∏ßÁöÑid mnLastRelocFrameIdÊòØÊúÄËøë‰∏ÄÊ¨°ÈáçÂÆö‰ΩçÂ∏ßÁöÑid mMaxFramesÊòØÂú∞ÂõæÁÇπÂá∫Áé∞ÁöÑÊúÄÂ§ßÂ∏ßÊï∞
    if(mCurrentFrame.mnId<mnLastRelocFrameId+mMaxFrames && nKFs>mMaxFrames)
        return false;

    int nMinObs = 3;//Âú∞ÂõæÁÇπÁöÑÊúÄÂ∞èËßÇÊµãÊ¨°Êï∞
    if(nKFs<=2)
        nMinObs=2;
    int nRefMatches = mpReferenceKF->TrackedMapPoints(nMinObs);//ÂèÇËÄÉÂÖ≥ÈîÆÂ∏ß‰∏≠Êª°Ë∂≥nMinObsÊù°‰ª∂ÁöÑÂú∞ÂõæÁÇπÊï∞Èáè

    //ÂΩìÂâçÂ±ÄÈÉ®Âª∫ÂõæÁ∫øÁ®ãÊòØÂê¶ÁπÅÂøôÁöÑÊ†áÂøó‰Ωç
    bool bLocalMappingIdle = mpLocalMapper->AcceptKeyFrames();

    int nNonTrackedClose = 0;//ÂèåÁõÆÔºàrgbdÔºâÁõ∏Êú∫‰∏≠Ê≤°ÊúâË∑üË∏™Âà∞ÁöÑ ËøëÁÇπ
    int nTrackedClose= 0;//ÂèåÁõÆÔºàrgbdÔºâÁõ∏Êú∫‰∏≠Ë∑üË∏™Âà∞ÁöÑ ËøëÁÇπ

    //ÂèåÁõÆÔºàrgbdÔºâÁõ∏Êú∫ÁöÑÊÉÖÂÜµ‰∏ãËé∑ÂèñËøëÁÇπÁöÑÊï∞Èáè
    if(mSensor!=System::MONOCULAR)
    {
        //ÈÅçÂéÜÂΩìÂâçÂ∏ßÁöÑÊâÄÊúâÁâπÂæÅÁÇπ
        for(int i =0; i<mCurrentFrame.N; i++)
        {
            //Ê∑±Â∫¶ÊúâÊïà
            if(mCurrentFrame.mvDepth[i]>0 && mCurrentFrame.mvDepth[i]<mThDepth)
            {
                if(mCurrentFrame.mvpMapPoints[i] && !mCurrentFrame.mvbOutlier[i])
                    nTrackedClose++;
                else
                    nNonTrackedClose++;
            }
        }
    }

    //Ê†πÊçÆËøëÁÇπÊï∞ÈáèÂà§Êñ≠ÊòØÂê¶ÈúÄË¶ÅÊèíÂÖ•ÂÖ≥ÈîÆÂ∏ßÁöÑÊ†áÂøó‰Ωç
    bool bNeedToInsertClose = (nTrackedClose<100) && (nNonTrackedClose>70);

    float thRefRatio = 0.75f;//ÂΩìÂâçÂ∏ßÂíåÂèÇËÄÉÂÖ≥ÈîÆÂ∏ßË∑üË∏™Âà∞ÁöÑÁÇπÁöÑÊØî‰æãÈòàÂÄº
    //Â¶ÇÊûúÂΩìÂâçÂú∞Âõæ‰∏≠ÂÖ≥ÈîÆÂ∏ßÂæàÂ∞ëÔºåÈôç‰ΩéÊèíÂÖ•ÁöÑÈó®Êßõ
    if(nKFs<2)
        thRefRatio = 0.4f;
    
    //ÂçïÁõÆÁõ∏Êú∫‰∏≠ÁöÑ ÂΩìÂâçÂ∏ßÂíåÂèÇËÄÉÂÖ≥ÈîÆÂ∏ßË∑üË∏™Âà∞ÁöÑÁÇπÁöÑÊØî‰æãÈòàÂÄº
    if(mSensor==System::MONOCULAR)
        thRefRatio = 0.9f;
    
    //!‰ª•‰∏ã‰∏∫ÊèíÂÖ•ÂÖ≥ÈîÆÂ∏ßÁöÑÊù°‰ª∂
    //Êù°‰ª∂1aÔºöË∑ùÁ¶ª‰∏äÊ¨°ÊèíÂÖ•ÂÖ≥ÈîÆÂ∏ßÁöÑÊó∂Èó¥ËøáÈïøÔºà1sÔºâ
    const bool c1a = mCurrentFrame.mnId>=mnLastKeyFrameId+mMaxFrames;
    //Êù°‰ª∂1bÔºöÊª°Ë∂≥Êù°‰ª∂1aÔºåÂπ∂‰∏îÂ±ÄÈÉ®Âª∫ÂõæÁ∫øÁ®ãÁ©∫Èó≤
    const bool c1b = (mCurrentFrame.mnId>=mnLastKeyFrameId+mMinFrames && bLocalMappingIdle);
    //Êù°‰ª∂1cÔºöÂú®ÂèåÁõÆÔºàrgbdÔºâÁõ∏Êú∫‰∏ãÔºåÂΩìÂâçÂ∏ßÂåπÈÖçÂà∞ÁöÑÁÇπ Â∞è‰∫é ÂèÇËÄÉÂÖ≥ÈîÆÂ∏ßÂåπÈÖçÂà∞ÁöÑÁÇπ√ó0.25ÔºõÊàñËÄÖË∑üË∏™Âà∞ÁöÑËøëÁÇπËæÉÂ∞ëÔºåÊ≤°ÊúâË∑üË∏™Âà∞ÁöÑËøëÁÇπÊï∞ÈáèËæÉÂ§ö
    const bool c1c =  mSensor!=System::MONOCULAR && (mnMatchesInliers<nRefMatches*0.25 || bNeedToInsertClose);

    /*Êù°‰ª∂2
    2a:ÂΩìÂâçÂ∏ßË∑üË∏™Âà∞ÁöÑÂú∞ÂõæÁÇπÂ∞è‰∫éÂèÇËÄÉÂÖ≥ÈîÆÂ∏ßË∑üË∏™Âà∞ÁöÑÁÇπ√óÊØî‰æãÈòàÂÄº
    2bÔºöÊª°Ë∂≥ËøëÁÇπÊù°‰ª∂
    2cÔºöÂΩìÂâçÂ∏ßÂåπÈÖçÂà∞ÁöÑÁÇπ>15
    */
    const bool c2 = ((mnMatchesInliers<nRefMatches*thRefRatio|| bNeedToInsertClose) && mnMatchesInliers>15);

    //!Êù°‰ª∂1a 1b 1cÂêåÊó∂Âè™ÈúÄË¶ÅÊª°Ë∂≥1‰∏™
    //!Êù°‰ª∂2a 2bÂè™ÈúÄË¶ÅÊª°Ë∂≥‰∏Ä‰∏™ÔºåÂπ∂‰∏î2cÂêåÊó∂Êª°Ë∂≥
    //!Ê≠§Êó∂ÊâçÊª°Ë∂≥ÊèíÂÖ•ÂÖ≥ÈîÆÂ∏ßÁöÑÂÖ®ÈÉ®Êù°‰ª∂
    if((c1a||c1b||c1c)&&c2)
    {
        //Â¶ÇÊûúÂ±ÄÈÉ®Âª∫ÂõæÁ∫øÁ®ãÁ©∫Èó≤ÔºåÂàôÊèíÂÖ•ÂÖ≥ÈîÆÂ∏ß
        if(bLocalMappingIdle)
        {
            return true;
        }
        //Â±ÄÈÉ®Âª∫ÂõæÁ∫øÁ®ãÁπÅÂøôÊó∂ÔºåÊ†πÊçÆÊÉÖÂÜµÊèíÂÖ•
        else
        {   
            mpLocalMapper->InterruptBA();//‰∏≠Êñ≠Â±ÄÈÉ®BA
            //ÂØπ‰∫éÂèåÁõÆÔºàrgbdÔºâÁõ∏Êú∫
            if(mSensor!=System::MONOCULAR)
            {
                //Â±ÄÈÉ®Âª∫ÂõæÁ∫øÁ®ã‰∏≠ÁöÑÂÖ≥ÈîÆÂ∏ß<3,ÂàôÊèíÂÖ•ÂÖ≥ÈîÆÂ∏ßÔºõÂê¶Âàô‰∏çÊèíÂÖ•
                if(mpLocalMapper->KeyframesInQueue()<3)
                    return true;
                else
                    return false;
            }
            //ÂØπ‰∫éÂçïÁõÆÁõ∏Êú∫
            else
                return false;
        }
    }
    else
        return false;
}

void Tracking::CreateNewKeyFrame()
{
    if(!mpLocalMapper->SetNotStop(true))
        return;

    KeyFrame* pKF = new KeyFrame(mCurrentFrame,mpMap,mpKeyFrameDB);

    mpReferenceKF = pKF;
    mCurrentFrame.mpReferenceKF = pKF;

    if(mSensor!=System::MONOCULAR)
    {
        mCurrentFrame.UpdatePoseMatrices();

        // We sort points by the measured depth by the stereo/RGBD sensor.
        // We create all those MapPoints whose depth < mThDepth.
        // If there are less than 100 close points we create the 100 closest.
        vector<pair<float,int> > vDepthIdx;
        vDepthIdx.reserve(mCurrentFrame.N);
        for(int i=0; i<mCurrentFrame.N; i++)
        {
            float z = mCurrentFrame.mvDepth[i];
            if(z>0)
            {
                vDepthIdx.push_back(make_pair(z,i));
            }
        }

        if(!vDepthIdx.empty())
        {
            sort(vDepthIdx.begin(),vDepthIdx.end());

            int nPoints = 0;
            for(size_t j=0; j<vDepthIdx.size();j++)
            {
                int i = vDepthIdx[j].second;

                bool bCreateNew = false;

                MapPoint* pMP = mCurrentFrame.mvpMapPoints[i];
                if(!pMP)
                    bCreateNew = true;
                else if(pMP->Observations()<1)
                {
                    bCreateNew = true;
                    mCurrentFrame.mvpMapPoints[i] = static_cast<MapPoint*>(NULL);
                }

                if(bCreateNew)
                {
                    cv::Mat x3D = mCurrentFrame.UnprojectStereo(i);
                    MapPoint* pNewMP = new MapPoint(x3D,pKF,mpMap);
                    pNewMP->AddObservation(pKF,i);
                    pKF->AddMapPoint(pNewMP,i);
                    pNewMP->ComputeDistinctiveDescriptors();
                    pNewMP->UpdateNormalAndDepth();
                    mpMap->AddMapPoint(pNewMP);

                    mCurrentFrame.mvpMapPoints[i]=pNewMP;
                    nPoints++;
                }
                else
                {
                    nPoints++;
                }

                if(vDepthIdx[j].first>mThDepth && nPoints>100)
                    break;
            }
        }
    }

    mpLocalMapper->InsertKeyFrame(pKF);

    mpLocalMapper->SetNotStop(false);

    mnLastKeyFrameId = mCurrentFrame.mnId;
    mpLastKeyFrame = pKF;
}

/**
 * @brief ÊâæÂà∞ÊúâÊïàÁöÑÂ±ÄÈÉ®Âú∞ÂõæÁÇπ
 * @note Â±ÄÈÉ®Âú∞ÂõæÁÇπ‰∏≠Â∑≤ÁªèÂú®ÂΩìÂâçÂ∏ß‰∏≠Âá∫Áé∞ÁöÑÁÇπ‰∏çÂÜçÂèÇ‰∏éÂêéÈù¢ÁöÑÊäïÂΩ±ÂåπÈÖç
 * @note Ââ©‰∏ãÁöÑÂ±ÄÈÉ®Âú∞ÂõæÁÇπÂú®ÂΩìÂâçÂ∏ßÁöÑËßÜÈáéËåÉÂõ¥Â§ñÁöÑ‰∏çÂÜçÂèÇ‰∏éÂêéÈù¢ÁöÑÊäïÂΩ±ÂåπÈÖç
 */
void Tracking::SearchLocalPoints()
{
    //ÈÅçÂéÜÂΩìÂâçÂ∏ßÁöÑÂú∞ÂõæÁÇπÔºåÂõ†‰∏∫Ëøô‰∫õÂú∞ÂõæÁÇπÂ∑≤ÁªèÂú®‰∏ä‰∏ÄÈò∂ÊÆµËøõË°åËøáË∑üË∏™ÔºàÊäïÂΩ±Ôºâ‰∫ÜÔºåÊâÄ‰ª•Ê†áËÆ∞Ëøô‰∫õÁÇπ‰∏çÂèÇ‰∏é‰πãÂêéÁöÑÊäïÂΩ±ÂåπÈÖç‰∫Ü
    for(vector<MapPoint*>::iterator vit=mCurrentFrame.mvpMapPoints.begin(), vend=mCurrentFrame.mvpMapPoints.end(); vit!=vend; vit++)
    {
        MapPoint* pMP = *vit;
        if(pMP)
        {
            if(pMP->isBad())
            {
                *vit = static_cast<MapPoint*>(NULL);
            }
            else
            {
                pMP->IncreaseVisible();//ËØ•ÁÇπÁöÑË¢´ËßÇÊµãÊ¨°Êï∞+1
                pMP->mnLastFrameSeen = mCurrentFrame.mnId;
                pMP->mbTrackInView = false;
            }
        }
    }

    int nToMatch=0;//ËÆ∞ÂΩïËÉΩË¢´Áî®‰∫éÊäïÂΩ±ÂåπÈÖçÁöÑÂ±ÄÈÉ®Âú∞ÂõæÁÇπ

    //ÈÅçÂéÜÂ±ÄÈÉ®Âú∞ÂõæÁÇπ
    for(vector<MapPoint*>::iterator vit=mvpLocalMapPoints.begin(), vend=mvpLocalMapPoints.end(); vit!=vend; vit++)
    {
        MapPoint* pMP = *vit;
        //Â¶ÇÊûúËØ•ÁÇπÂ∑≤ÁªèÂú®ÂΩìÂâçÂ∏ß‰∏≠ÔºåË∑≥Ëøá
        if(pMP->mnLastFrameSeen == mCurrentFrame.mnId)
            continue;
        if(pMP->isBad())
            continue;
        //Âà§Êñ≠ËØ•ÁÇπÊòØÂê¶Âú®ÂΩìÂâçÂ∏ßÁöÑËßÜÈáéËåÉÂõ¥ÂÜÖÔºåÂú®ÂΩìÂâçÂ∏ßÁöÑËßÜÈáéËåÉÂõ¥ÂÜÖÊâçÂèÇ‰∏éÂêéÈù¢ÁöÑÊäïÂΩ±ÂåπÈÖç
        if(mCurrentFrame.isInFrustum(pMP,0.5))
        {
            pMP->IncreaseVisible();
            nToMatch++;
        }
    }

    if(nToMatch>0)
    {
        ORBmatcher matcher(0.8);
        int th = 1;
        if(mSensor==System::RGBD)
            th=3;
        //Â¶ÇÊûúÂΩìÂâçÂ∏ßÊúÄËøëË¢´Áî®‰∫éÈáçÂÆö‰ΩçÔºåÂàôÂ¢ûÂ§ßÊêúÁ¥¢ÈòàÂÄº
        if(mCurrentFrame.mnId<mnLastRelocFrameId+2)
            th=5;
        //ÊäïÂΩ±ÂåπÈÖçËé∑ÂæóÊõ¥Â§öÁöÑÂåπÈÖçÂÖ≥Á≥ª
        matcher.SearchByProjection(mCurrentFrame,mvpLocalMapPoints,th);
    }
}

void Tracking::UpdateLocalMap()
{
    // This is for visualization
    mpMap->SetReferenceMapPoints(mvpLocalMapPoints);

    // Update
    UpdateLocalKeyFrames();
    UpdateLocalPoints();
}

/**
 * @brief Êõ¥Êñ∞Â±ÄÈÉ®ÂÖ≥ÈîÆÂ∏ßÁöÑÂú∞ÂõæÁÇπÔºàÂ∞ÜÊúâÊïàÁöÑÂú∞ÂõæÁÇπÂä†ÂÖ•Âà∞Â±ÄÈÉ®Âú∞ÂõæÁÇπ‰∏≠Ôºâ
 */
void Tracking::UpdateLocalPoints()
{
    mvpLocalMapPoints.clear();

    //ÈÅçÂéÜÂ±ÄÈÉ®ÂÖ≥ÈîÆÂ∏ß
    for(vector<KeyFrame*>::const_iterator itKF=mvpLocalKeyFrames.begin(), itEndKF=mvpLocalKeyFrames.end(); itKF!=itEndKF; itKF++)
    {
        KeyFrame* pKF = *itKF;
        const vector<MapPoint*> vpMPs = pKF->GetMapPointMatches();//Ëé∑ÂèñÂ±ÄÈÉ®ÂÖ≥ÈîÆÂ∏ßÁöÑÂú∞ÂõæÁÇπ

        //ÈÅçÂéÜÊâÄÊúâÂú∞ÂõæÁÇπ
        for(vector<MapPoint*>::const_iterator itMP=vpMPs.begin(), itEndMP=vpMPs.end(); itMP!=itEndMP; itMP++)
        {
            MapPoint* pMP = *itMP;
            if(!pMP)//Ê≤°ÊúâÁÇπ Ë∑≥Ëøá
                continue;
            if(pMP->mnTrackReferenceForFrame==mCurrentFrame.mnId)//Â∏ßÈáçÂ§ç Ë∑≥Ëøá
                continue;
            //ÂÇ®Â≠òÂ±ÄÈÉ®Âú∞ÂõæÁÇπ
            if(!pMP->isBad())
            {
                mvpLocalMapPoints.push_back(pMP);
                pMP->mnTrackReferenceForFrame=mCurrentFrame.mnId;
            }
        }
    }
}


/**
 * @brief Êõ¥Êñ∞Â±ÄÈÉ®ÂÖ≥ÈîÆÂ∏ß
 */
void Tracking::UpdateLocalKeyFrames()
{
    map<KeyFrame*,int> keyframeCounter;
    //ÈÅçÂéÜÂΩìÂâçÂ∏ßÁöÑÂú∞ÂõæÁÇπÔºåËÆ∞ÂΩïÊâÄÊúâËÉΩËßÇÊµãÂà∞Ëøô‰∫õÂú∞ÂõæÁÇπÁöÑÂÖ≥ÈîÆÂ∏ßÔºàÂÖ±ËßÜÂ∏ßÔºâ
    for(int i=0; i<mCurrentFrame.N; i++)
    {
        if(mCurrentFrame.mvpMapPoints[i])
        {
            MapPoint* pMP = mCurrentFrame.mvpMapPoints[i];
            if(!pMP->isBad())
            {
                //Ëé∑ÂèñËÉΩËßÇÊµãÂà∞Ê≠§ÁÇπÁöÑÂÖ≥ÈîÆÂ∏ßÂèäÂÖ∂Á¥¢Âºï
                const map<KeyFrame*,size_t> observations = pMP->GetObservations();
                //ËÆ∞ÂΩïÂΩìÂâçÂ∏ßÁöÑÂÖ±ËßÜÁ®ãÂ∫¶
                for(map<KeyFrame*,size_t>::const_iterator it=observations.begin(), itend=observations.end(); it!=itend; it++)
                    keyframeCounter[it->first]++;
            }
            else
            {
                mCurrentFrame.mvpMapPoints[i]=NULL;
            }
        }
    }
    //Ê≤°ÊúâÂÖ±ËßÜÂ∏ß
    if(keyframeCounter.empty())
        return;

    int max=0;
    KeyFrame* pKFmax= static_cast<KeyFrame*>(NULL);//ÂÇ®Â≠òÂÖ∑ÊúâÊúÄÈ´òÂÖ±ËßÜÁ®ãÂ∫¶ÁöÑÂÖ≥ÈîÆÂ∏ß

    mvpLocalKeyFrames.clear();
    mvpLocalKeyFrames.reserve(3*keyframeCounter.size());

    //ÈÅçÂéÜÂÖ±ËßÜÂÖ≥ÈîÆÂ∏ß
    for(map<KeyFrame*,int>::const_iterator it=keyframeCounter.begin(), itEnd=keyframeCounter.end(); it!=itEnd; it++)
    {
        KeyFrame* pKF = it->first;

        if(pKF->isBad())
            continue;
        //ÊâæÂà∞ÂÖ∑ÊúâÊúÄÈ´òÂÖ±ËßÜÁ®ãÂ∫¶ÁöÑÂÖ≥ÈîÆÂ∏ß
        if(it->second>max)
        {
            max=it->second;
            pKFmax=pKF;
        }
        //Â∞ÜËØ•ÂÖ≥ÈîÆÂ∏ßÂä†ÂÖ•Âà∞Â±ÄÈÉ®ÂÖ≥ÈîÆÂ∏ß‰∏≠ÔºàËøôÈáåÂä†ÂÖ•ÁöÑ‰Ωú‰∏∫‰∏ÄÁ∫ßÂÖ±ËßÜÂÖ≥ÈîÆÂ∏ßÔºâ
        mvpLocalKeyFrames.push_back(it->first);
        pKF->mnTrackReferenceForFrame = mCurrentFrame.mnId;//ËÆ∞ÂΩïËØ•ÂÖ≥ÈîÆÂ∏ßÁöÑid
    }

    //ÈÅçÂéÜ‰∏ÄÁ∫ßÂÖ±ËßÜÂÖ≥ÈîÆÂ∏ßÔºåÊâæÂà∞‰∫åÁ∫ßÂÖ±ËßÜÂÖ≥ÈîÆÂ∏ß
    for(vector<KeyFrame*>::const_iterator itKF=mvpLocalKeyFrames.begin(), itEndKF=mvpLocalKeyFrames.end(); itKF!=itEndKF; itKF++)
    {
        //Â¶ÇÊûú‰∏ÄÁ∫ßÂÖ±ËßÜÂÖ≥ÈîÆÂ∏ß>80ÔºåÂ∞±‰∏çÊâæ‰∫åÁ∫ß‰∫Ü
        if(mvpLocalKeyFrames.size()>80)
            break;

        KeyFrame* pKF = *itKF;

        //ÊâæÂà∞‰∏éÂΩìÂâç‰∏ÄÁ∫ßÂÖ±ËßÜÂÖ≥ÈîÆÂ∏ßÊúâÂÖ±ËßÜÂÖ≥Á≥ªÁöÑÂâç10‰∏™ÂÖ≥ÈîÆÂ∏ßÔºå‰Ωú‰∏∫‰∫åÁ∫ßÂÖ±ËßÜÂÖ≥ÈîÆÂ∏ß
        //ËøôÈáåvNeighsÂÇ®Â≠òÁöÑ‰∫åÁ∫ßÂÖ±ËßÜÂÖ≥ÈîÆÂ∏ßÊåâÂÖ±ËßÜÁ®ãÂ∫¶‰ªéÂ§ßÂà∞Â∞èÊéíÂàó
        const vector<KeyFrame*> vNeighs = pKF->GetBestCovisibilityKeyFrames(10);

        //ÈÅçÂéÜ‰∫åÁ∫ßÂÖ±ËßÜÂÖ≥ÈîÆÂ∏ß
        for(vector<KeyFrame*>::const_iterator itNeighKF=vNeighs.begin(), itEndNeighKF=vNeighs.end(); itNeighKF!=itEndNeighKF; itNeighKF++)
        {
            KeyFrame* pNeighKF = *itNeighKF;
            if(!pNeighKF->isBad())
            {   
                //Â∞Ü‰∫åÁ∫ßÂÖ±ËßÜÂÖ≥ÈîÆÂ∏ßÂä†ÂÖ•Âà∞Â±ÄÈÉ®ÂÖ≥ÈîÆÂ∏ß‰∏≠
                if(pNeighKF->mnTrackReferenceForFrame!=mCurrentFrame.mnId)
                {
                    mvpLocalKeyFrames.push_back(pNeighKF);
                    pNeighKF->mnTrackReferenceForFrame=mCurrentFrame.mnId;
                    break;
                }
            }
        }

        //Ëé∑Âèñ‰∏ÄÁ∫ßÂÖ±ËßÜÂÖ≥ÈîÆÂ∏ßÁöÑÂ≠êÂÖ≥ÈîÆÂ∏ßÔºåÂ∞ÜÂÖ∂Âä†ÂÖ•Âà∞Â±ÄÈÉ®ÂÖ≥ÈîÆÂ∏ß‰∏≠
        const set<KeyFrame*> spChilds = pKF->GetChilds();
        for(set<KeyFrame*>::const_iterator sit=spChilds.begin(), send=spChilds.end(); sit!=send; sit++)
        {
            KeyFrame* pChildKF = *sit;
            if(!pChildKF->isBad())
            {
                if(pChildKF->mnTrackReferenceForFrame!=mCurrentFrame.mnId)
                {
                    mvpLocalKeyFrames.push_back(pChildKF);
                    pChildKF->mnTrackReferenceForFrame=mCurrentFrame.mnId;
                    break;
                }
            }
        }

        //Ëé∑Âèñ‰∏ÄÁ∫ßÂÖ±ËßÜÂÖ≥ÈîÆÂ∏ßÁöÑÁà∂ÂÖ≥ÈîÆÂ∏ßÔºåÂ∞ÜÂÖ∂Âä†ÂÖ•Âà∞Â±ÄÈÉ®ÂÖ≥ÈîÆÂ∏ß‰∏≠
        KeyFrame* pParent = pKF->GetParent();
        if(pParent)
        {
            if(pParent->mnTrackReferenceForFrame!=mCurrentFrame.mnId)
            {
                mvpLocalKeyFrames.push_back(pParent);
                pParent->mnTrackReferenceForFrame=mCurrentFrame.mnId;
                break;
            }
        }

    }

    //Â∞ÜÂÖ∑ÊúâÊúÄÈ´òÂÖ±ËßÜÁ®ãÂ∫¶ÁöÑÂÖ≥ÈîÆÂ∏ß‰Ωú‰∏∫ÂΩìÂâçÂ∏ßÁöÑÂèÇËÄÉÂÖ≥ÈîÆÂ∏ß
    if(pKFmax)
    {
        mpReferenceKF = pKFmax;
        mCurrentFrame.mpReferenceKF = mpReferenceKF;
    }
}

/**
 * @brief ÈáçÂÆö‰ΩçË∑üË∏™
 * @return Ë∑üË∏™ÊàêÂäü-true Â§±Ë¥•-false
 */
bool Tracking::Relocalization()
{
    //ËÆ°ÁÆóÂΩìÂâçÂ∏ßÁöÑËØçË¢ãÂêëÈáè
    mCurrentFrame.ComputeBoW();
    
    //Ëé∑ÂèñÂΩìÂâçÂ∏ßÁöÑÈáçÂÆö‰ΩçÂÄôÈÄâÂÖ≥ÈîÆÂ∏ß
    vector<KeyFrame*> vpCandidateKFs = mpKeyFrameDB->DetectRelocalizationCandidates(&mCurrentFrame);

    if(vpCandidateKFs.empty())
        return false;

    const int nKFs = vpCandidateKFs.size();

    ORBmatcher matcher(0.75,true);

    vector<PnPsolver*> vpPnPsolvers;//ÊØè‰∏™ÂÄôÈÄâÂÖ≥ÈîÆÂ∏ßÁöÑPnPÊ±ÇËß£Âô®
    vpPnPsolvers.resize(nKFs);

    vector<vector<MapPoint*> > vvpMapPointMatches;//ÊØè‰∏™ÂÄôÈÄâÂÖ≥ÈîÆÂ∏ßÁöÑÂåπÈÖçÂÖ≥Á≥ª
    vvpMapPointMatches.resize(nKFs);

    vector<bool> vbDiscarded;//Áî®‰∫é‰∏çÈúÄË¶ÅÁöÑÂÖ≥ÈîÆÂ∏ßÁöÑÊ†áÂøó‰Ωç
    vbDiscarded.resize(nKFs);

    int nCandidates=0;
    //ÈÅçÂéÜÊâÄÊúâÂÄôÈÄâÂÖ≥ÈîÆÂ∏ßÔºåÈÄöËøáËØçË¢ãÂø´ÈÄüÂåπÈÖçÔºåÁî®ÂåπÈÖçÁªìÊûúÂàùÂßãÂåñPnPsolver
    for(int i=0; i<nKFs; i++)
    {
        KeyFrame* pKF = vpCandidateKFs[i];
        if(pKF->isBad())
            vbDiscarded[i] = true;
        else
        {
            int nmatches = matcher.SearchByBoW(pKF,mCurrentFrame,vvpMapPointMatches[i]);
            if(nmatches<15)
            {
                vbDiscarded[i] = true;
                continue;
            }
            //Áî®ÂåπÈÖçÁªìÊûúÂàùÂßãÂåñPnPsolver
            else
            {
                PnPsolver* pSolver = new PnPsolver(mCurrentFrame,vvpMapPointMatches[i]);
                pSolver->SetRansacParameters(0.99,10,300,4,0.5,5.991);
                vpPnPsolvers[i] = pSolver;
                nCandidates++;
            }
        }
    }

    bool bMatch = false;
    ORBmatcher matcher2(0.9,true);

    //Âà©Áî®ÊâÄÊúâÂÄôÈÄâÂÖ≥ÈîÆÂ∏ßÊù•‰ºòÂåñ‰ΩçÂßø
    while(nCandidates>0 && !bMatch)
    {
        for(int i=0; i<nKFs; i++)
        {
            if(vbDiscarded[i])
                continue;

            vector<bool> vbInliers;
            int nInliers;
            bool bNoMore;
            //‰ΩøÁî®EPnPÁÆóÊ≥ï‰º∞ËÆ°‰ΩçÂßøÔºåËø≠‰ª£Ê¨°Êï∞5
            PnPsolver* pSolver = vpPnPsolvers[i];
            cv::Mat Tcw = pSolver->iterate(5,bNoMore,vbInliers,nInliers);

            //Â¶ÇÊûúbNoMore‰∏∫trueÔºåË°®Á§∫Ë∂ÖËøá‰∫ÜRANSACÊúÄÂ§ßËø≠‰ª£Ê¨°Êï∞Ôºå‰∏¢ÂºÉËØ•ÂÖ≥ÈîÆÂ∏ß
            if(bNoMore)
            {
                vbDiscarded[i]=true;
                nCandidates--;
            }
            //‰ºòÂåñ‰ΩçÂßø
            if(!Tcw.empty())
            {
                Tcw.copyTo(mCurrentFrame.mTcw);

                set<MapPoint*> sFound;

                const int np = vbInliers.size();
                //ÈÅçÂéÜÊâÄÊúâÂÜÖÁÇπ
                for(int j=0; j<np; j++)
                {
                    if(vbInliers[j])
                    {
                        mCurrentFrame.mvpMapPoints[j]=vvpMapPointMatches[i][j];
                        sFound.insert(vvpMapPointMatches[i][j]);
                    }
                    else
                        mCurrentFrame.mvpMapPoints[j]=NULL;
                }
                //‰ºòÂåñ‰ΩçÂßøÔºà‰∏ç‰ºòÂåñÂú∞ÂõæÁÇπÔºåËøîÂõû‰ºòÂåñÂêéÁöÑÂÜÖÁÇπÊï∞ÈáèÔºâ
                int nGood = Optimizer::PoseOptimization(&mCurrentFrame);

                if(nGood<10)
                    continue;
                //Âà†Èô§ÂΩìÂâçÂ∏ßÁöÑÂ§ñÁÇπÂØπÂ∫îÁöÑÂú∞ÂõæÁÇπ
                for(int io =0; io<mCurrentFrame.N; io++)
                    if(mCurrentFrame.mvbOutlier[io])
                        mCurrentFrame.mvpMapPoints[io]=static_cast<MapPoint*>(NULL);

                //Â¶ÇÊûúÂÜÖÁÇπÊï∞ÈáèËæÉÂ∞ëÔºåÂàôÈÄöËøáÊäïÂΩ±ÂÜçÂåπÈÖç
                if(nGood<50)
                {
                    int nadditional =matcher2.SearchByProjection(mCurrentFrame,vpCandidateKFs[i],sFound,10,100);

                    if(nadditional+nGood>=50)
                    {
                        nGood = Optimizer::PoseOptimization(&mCurrentFrame);

                        if(nGood>30 && nGood<50)
                        {
                            sFound.clear();
                            for(int ip =0; ip<mCurrentFrame.N; ip++)
                                if(mCurrentFrame.mvpMapPoints[ip])
                                    sFound.insert(mCurrentFrame.mvpMapPoints[ip]);
                            nadditional =matcher2.SearchByProjection(mCurrentFrame,vpCandidateKFs[i],sFound,3,64);

                            if(nGood+nadditional>=50)
                            {
                                nGood = Optimizer::PoseOptimization(&mCurrentFrame);

                                for(int io =0; io<mCurrentFrame.N; io++)
                                    if(mCurrentFrame.mvbOutlier[io])
                                        mCurrentFrame.mvpMapPoints[io]=NULL;
                            }
                        }
                    }
                }


                //Â¶ÇÊûúÂΩìÂâçÁöÑÂÄôÈÄâÂÖ≥ÈîÆÂ∏ßÁöÑÂÜÖÁÇπ>50ÔºåÂàôËÆ§‰∏∫ÈáçÂÆö‰ΩçÊàêÂäüÔºåÁªìÊùüÂæ™ÁéØÔºàÂè™Ë¶ÅÊúâ‰∏Ä‰∏™ÂÄôÈÄâÂÖ≥ÈîÆÂ∏ßÊª°Ë∂≥Êù°‰ª∂Âç≥ÂèØÔºå‰∏çÈúÄËÄÉËôëÂÖ∂‰ªñÂÄôÈÄâÂÖ≥ÈîÆÂ∏ßÔºâ
                if(nGood>=50)
                {
                    bMatch = true;
                    break;
                }
            }
        }
    }

    if(!bMatch)
    {
        return false;
    }
    else
    {
        mnLastRelocFrameId = mCurrentFrame.mnId;//ËÆ∞ÂΩïÈáçÂÆö‰ΩçÊàêÂäüÁöÑÂ∏ßÁöÑid
        return true;
    }

}

void Tracking::Reset()
{

    cout << "System Reseting" << endl;
    if(mpViewer)
    {
        mpViewer->RequestStop();
        while(!mpViewer->isStopped())
            usleep(3000);
    }

    // Reset Local Mapping
    cout << "Reseting Local Mapper...";
    mpLocalMapper->RequestReset();
    cout << " done" << endl;

    // Reset Loop Closing
    cout << "Reseting Loop Closing...";
    mpLoopClosing->RequestReset();
    cout << " done" << endl;

    // Clear BoW Database
    cout << "Reseting Database...";
    mpKeyFrameDB->clear();
    cout << " done" << endl;

    // Clear Map (this erase MapPoints and KeyFrames)
    mpMap->clear();

    KeyFrame::nNextId = 0;
    Frame::nNextId = 0;
    mState = NO_IMAGES_YET;

    if(mpInitializer)
    {
        delete mpInitializer;
        mpInitializer = static_cast<Initializer*>(NULL);
    }

    mlRelativeFramePoses.clear();
    mlpReferences.clear();
    mlFrameTimes.clear();
    mlbLost.clear();

    if(mpViewer)
        mpViewer->Release();
}

void Tracking::ChangeCalibration(const string &strSettingPath)
{
    cv::FileStorage fSettings(strSettingPath, cv::FileStorage::READ);
    float fx = fSettings["Camera.fx"];
    float fy = fSettings["Camera.fy"];
    float cx = fSettings["Camera.cx"];
    float cy = fSettings["Camera.cy"];

    cv::Mat K = cv::Mat::eye(3,3,CV_32F);
    K.at<float>(0,0) = fx;
    K.at<float>(1,1) = fy;
    K.at<float>(0,2) = cx;
    K.at<float>(1,2) = cy;
    K.copyTo(mK);

    cv::Mat DistCoef(4,1,CV_32F);
    DistCoef.at<float>(0) = fSettings["Camera.k1"];
    DistCoef.at<float>(1) = fSettings["Camera.k2"];
    DistCoef.at<float>(2) = fSettings["Camera.p1"];
    DistCoef.at<float>(3) = fSettings["Camera.p2"];
    const float k3 = fSettings["Camera.k3"];
    if(k3!=0)
    {
        DistCoef.resize(5);
        DistCoef.at<float>(4) = k3;
    }
    DistCoef.copyTo(mDistCoef);

    mbf = fSettings["Camera.bf"];

    Frame::mbInitialComputations = true;
}

void Tracking::InformOnlyTracking(const bool &flag)
{
    mbOnlyTracking = flag;
}



} //namespace ORB_SLAM
